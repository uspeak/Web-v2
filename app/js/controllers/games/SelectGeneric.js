// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["Console", "SoundManager", "jQuery", "Underscore", "controllers/games/Game"], function(Console, soundManager, $, _, GameController) {
    "use strict";

    var SelectGenericController;
    return SelectGenericController = (function(_super) {

      __extends(SelectGenericController, _super);

      function SelectGenericController() {
        return SelectGenericController.__super__.constructor.apply(this, arguments);
      }

      SelectGenericController.prototype.initScope = function() {
        var __;
        __ = this;
        return this.scope.selectOption = function(correct) {
          var kill, _ref;
          if (correct == null) {
            correct = this.option.correct;
          }
          kill = false;
          if (!this.clicked) {
            __.clickedWords.push(this.option.word);
          }
          if (!correct && !this.clicked) {
            kill = __.makeMistake();
          }
          if (kill) {
            if ((_ref = this.clicked) == null) {
              this.clicked = !__.clickedCorrect;
            }
          }
          __.clickedCorrect = correct;
          if (correct) {
            __.markWord(this.id, this.word, true);
            __.addPoints(__.roundPoints());
            return __.nextRound();
          }
        };
      };

      SelectGenericController.prototype.nextRound = function() {
        this.addInfo();
        return SelectGenericController.__super__.nextRound.apply(this, arguments);
      };

      SelectGenericController.prototype.addInfo = function() {
        var d, _base, _name, _ref;
        d = this.data.W[this.round];
        if ((_ref = (_base = this.info)[_name = this.round]) == null) {
          _base[_name] = {
            id: d.id,
            choosen: []
          };
        }
        this.info[this.round] = _.extend(this.info[this.round] || {}, {
          ref: this.clickedCorrect ? 1 : 2,
          mistakes: this.roundMistakes(),
          choosen: this.clickedWords
        });
        return Console.info("Added info", this.info[this.round]);
      };

      SelectGenericController.prototype.preloadAudio = function(data) {
        Console.info("Precarga de Audio iniciada");
        return _.each(data.W, function(round) {
          if (round.au) {
            return soundManager.createSound({
              url: round.au,
              autoLoad: true,
              id: round.au
            });
          }
        });
      };

      SelectGenericController.prototype.roundPoints = function() {
        var mistakes;
        mistakes = this.roundMistakes();
        return (this.numOptions - mistakes * 2) * 25;
      };

      SelectGenericController.prototype.initData = function(data) {
        var _ref;
        SelectGenericController.__super__.initData.call(this, data);
        this.numOptions = (((_ref = data.W[0].dist) != null ? _ref.length : void 0) || 1) + 1;
        this.maxMistakes = this.numOptions / 2;
        this.preloadAudio(data);
        return this.totalRounds = data.W.length;
      };

      SelectGenericController.prototype.initDataRound = function(data) {
        var options;
        options = _.map(data.dist, function(word) {
          return {
            word: word
          };
        });
        options.push({
          word: data.m,
          correct: true
        });
        this.markWord(data.id, data.w);
        this.scope.word = data.w;
        this.scope.id = data.id;
        this.scope.options = _.shuffle(options);
        return this.scope.$apply();
      };

      SelectGenericController.prototype.goRound = function(round) {
        SelectGenericController.__super__.goRound.call(this, round);
        this.clickedCorrect = false;
        this.clickedWords = [];
        return this.initDataRound(this.data.W[round]);
      };

      return SelectGenericController;

    })(GameController);
  });

}).call(this);
