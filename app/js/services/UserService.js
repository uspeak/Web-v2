// Generated by CoffeeScript 1.3.3
(function() {

  define(["Console", "Underscore", "lib/base64"], function(Console, _, Base64) {
    "use strict";

    var make_base_auth, service;
    Console.group("Entering UserService module.");
    make_base_auth = function(user, pass) {
      var hash, tok;
      tok = user + ":" + pass;
      hash = Base64.encode(tok);
      return "Basic " + hash;
    };
    service = function($resource, $http) {
      var UserService, default_opts;
      $http.defaults.withCredentials = true;
      UserService = $resource("" + API_BASE + "users/:controller.json", {}, {
        register: {
          method: "POST",
          params: {
            controller: "add"
          }
        },
        login: {
          method: "GET",
          params: {
            controller: "token"
          }
        }
      });
      default_opts = {
        error: function() {},
        success: function() {}
      };
      UserService.prototype.setToken = function(user, pass) {
        var auth;
        if (!pass) {
          Console.info("Successful login. Token: {0}".format(user));
          this.token = user;
        }
        auth = make_base_auth(user, pass || "");
        $http.defaults.headers.post["Authorization"] = auth;
        $http.defaults.headers.get = $http.defaults.headers.get || {};
        return $http.defaults.headers.get["Authorization"] = auth;
      };
      UserService.prototype.login = function(user, pass, opts) {
        var $this;
        $this = this;
        opts = _.extend({}, default_opts, opts);
        this.setToken(user, pass);
        return this.$login((function(data) {
          var _ref;
          if (data.res !== 500) {
            $this.setToken(data.res);
          }
          return (_ref = opts.success) != null ? _ref.call($this, data) : void 0;
        }), function(data) {
          var _ref;
          return (_ref = opts.error) != null ? _ref.call($this, data.res, data) : void 0;
        });
      };
      UserService.prototype.register = function(data, opts) {
        var $this;
        $this = this;
        this.User = data;
        opts = _.extend({}, default_opts, opts);
        return this.$register(function(data) {
          var _ref;
          if (isString(data.res)) {
            $this.setToken(data.res);
            return (_ref = opts.success) != null ? _ref.call($this, data) : void 0;
          }
        });
      };
      return UserService;
    };
    Console.groupEnd();
    return service;
  });

}).call(this);
