// Generated by CoffeeScript 1.3.3
(function() {

  define(["Console", "Underscore", "jQuery"], function(Console, _, $) {
    "use strict";
    Console.group("Entering games directive module.");
    Console.groupEnd();
    return function() {
      return {
        restrict: "E",
        transclude: true,
        scope: true,
        template: "<div class=\"games\" ng-transclude></div>",
        replace: true,
        controller: function($scope, $element, games, GameWordsService, ChallengeWordsService) {
          var $game, game_active, play, unplay;
          game_active = void 0;
          $game = $("#game");
          play = function(gameData, onFinish, diagnostic) {
            var game, gameId;
            if (_.isArray(gameData)) {
              gameData = gameData[0];
            }
            angular.forEach(games.games, function(game, name) {
              return game.scope.active = false;
            });
            gameId = gameData.gid;
            game = games.id(gameId);
            $scope.$root.hideScreen(function() {
              Console.group("Game " + gameData.title);
              $game.addClass("play");
              $scope.$parent.title = game.attrs.gameTitle;
              game_active = game;
              return game.play(gameData, onFinish, diagnostic);
            });
            return game;
          };
          unplay = function() {
            Console.groupEnd();
            $game.removeClass("play");
            angular.forEach(games.games, function(game, name) {
              if (game.scope.active) {
                game.scope.active = false;
                return game.unplay();
              }
            });
            return game_active = undefined;
          };
          $scope.resumeGame = function(gameId) {
            $scope.paused = false;
            return game_active.resume();
          };
          $scope.pauseGame = function() {
            $scope.paused = true;
            return game_active.pause();
          };
          $scope.$parent.exit = function() {
            if (game_active.isDiagnostic) {
              $scope.goScreen("diagnostic-games-intro");
            } else {
              $scope.goScreen("user-games");
            }
            return unplay();
          };
          $scope.$parent.playDiagnosticGame = function(gameId, gameData) {
            var game;
            return game = play(gameData, function() {
              Console.info("Finished game");
              $scope.diagnostic.gameIndex += 1;
              if ($scope.diagnostic.finished()) {
                $scope.goScreen("diagnostic-register");
              } else {
                $scope.goScreen("diagnostic-games-intro");
              }
              return unplay();
            }, true);
          };
          $scope.$parent.playGame = function(gameId) {
            var gameInfo, onFinish;
            $game.addClass("loading");
            gameInfo = games.id(gameId);
            Console.info("Loading game", gameInfo);
            onFinish = function(data) {
              var game;
              $game.removeClass("loading");
              Console.info("Game loaded", data);
              return game = play(data, function() {
                Console.info("Finished game");
                $scope.goScreen("user-games");
                return unplay();
              });
            };
            if (gameId !== 8) {
              return GameWordsService.get({
                lang_dir: LANG_DIR,
                game: gameInfo.id
              }, onFinish);
            } else {
              return ChallengeWordsService.get({
                lang_dir: LANG_DIR
              }, onFinish);
            }
          };
          $scope.$parent.gameDescription = function(gameId) {
            if (gameId) {
              return games.id(gameId).description;
            }
          };
          return this.addGame = function(scope, element, attrs) {
            var controller;
            controller = element.controller();
            return games.register(controller, attrs);
          };
        }
      };
    };
  });

}).call(this);
