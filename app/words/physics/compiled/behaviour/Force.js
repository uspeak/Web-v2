// Generated by CoffeeScript 1.3.3
/* Force Behaviour
*/
var Force,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Force = (function(_super) {

  __extends(Force, _super);
  function Force(radius, strength) {
    this.radius = radius != null ? radius : 1000;
    this.strength = strength != null ? strength : 100.0;
    this._delta = new Vector();
    this.setRadius(this.radius);
    this.pool = [];
    Force.__super__.constructor.apply(this, arguments);
  }

  Force.prototype.add = function(p) {
    this.pool.push(p);
    p.behaviours.push(this);
    console.log('********ADD************',this,p.behaviours,this.pool.length)
  }

  Force.prototype.remove = function(p) {
    this.pool.remove(p);
    p.behaviours.remove(this);
    console.log('*********REMOVE***********',this,p.behaviours,this.pool.length)
  }


  Force.prototype.setRadius = function(radius) {
    this.radius = radius;
    return this.radiusSq = radius * radius;
  };

  Force.prototype.apply = function(p, dt, index) {
    var dist, distSq, i, mt, o, overlap, r1, r2, radii, _i, _ref, _results;
    _results = [];
    for (i = 0;i<this.pool.length;i++) {
      o = this.pool[i];
      if (o !== p) {
        // console.log(o);
        var distSq;
        (this._delta.copy(o.pos)).sub(p.pos);
        distSq = this._delta.magSq();
        if (distSq < this.radiusSq && distSq > 0.000001) {
          this._delta.norm().scale(1.0 - distSq / this.radiusSq);
          
          //if (Forcei%1000==0)console.log(o,p,distSq,this._delta);
          // console.log(this._delta.scale(this.strength));
          p.acc.add(this._delta.scale(this.strength));
          //  o.acc.add(this._delta.scale(-1));
        }
        _results.push(void 0);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Force;

})(Behaviour);
