// Generated by CoffeeScript 1.3.3
/* DOM Renderer
*/

/*

	Updating styles:

	Nodes
*/

var DOMRenderer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DOMRenderer = (function(_super) {

  __extends(DOMRenderer, _super);

  function DOMRenderer() {
    this.setSize = __bind(this.setSize, this);
    DOMRenderer.__super__.constructor.apply(this, arguments);
    this.useGPU = true;
    this.domElement = document.createElement('div');
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.canvas.style.position = 'absolute';
    this.canvas.style.left = 0;
    this.canvas.style.top = 0;
    this.colors = ['red','blue','green','yellow','brown','pink'];
    this.center = false;
    
    // this.domElement.style.pointerEvents = 'none';
    this.domElement.appendChild(this.canvas);
  }

  DOMRenderer.prototype.init = function(physics) {
    var el, mr, p, st, _i, _len, _ref;
    DOMRenderer.__super__.init.call(this, physics);
    var _this = this;
    _ref = physics.particles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      this.initParticle(p);
    }
    el = document.createElement('span');
    st = el.style;
    mr = 20;
    st.backgroundColor = '#ffffff';
    st.borderRadius = mr;
    st.marginLeft = -mr;
    st.marginTop = -mr;
    st.position = 'absolute';
    st.display = 'block';
    st.opacity = 0.1;
    st.height = mr * 2;
    st.width = mr * 2;
    this.domElement.appendChild(el);
    $(this.domElement).dblclick(function() {
      _this.setZoom(_this.zoom*2, physics);
    })
    // .mousedown(function(event) { 
    //   if (event.which==3) {
    //     _this.setZoom(_this.zoom/2, physics);
    //     event.stopPropagation();
    //     return false;
    //   }
    // })
    .bind('mousewheel', function(event) {
      move = event.originalEvent.wheelDelta <= 0?2:1/2;
      _this.setZoom(_this.zoom*move, physics);
      event.preventDefault();
    });
    this.setZoom(.25,physics);
    return this.mouse.domElement = el;
  };
  DOMRenderer.prototype.setZoom = function(zoom, physics) {
    this.zoom = zoom;
    this.centerVector = (new Vector(1024,768)).scale((1/this.zoom)/2);
    _ref = physics.particles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      st = p.domElement.style;
      var zoomedRadius = p.radius * zoom;
      st.backgroundColor = this.colors[p.level] || 'gray';//p.colour || 'black';
      st.borderRadius = zoomedRadius;
      st.marginLeft = -zoomedRadius;
      st.marginTop = -zoomedRadius;
      // st.opacity = 0.85;
      st.height = 2* zoomedRadius;
      st.width = 2* zoomedRadius;
    }
  }
  DOMRenderer.prototype.initParticle = function(p) {

    console.log('initParticle');
    el = document.createElement('span');
    st = el.style;
    var zoomedRadius = p.radius * this.zoom;
    st.backgroundColor = this.colors[p.level] || 'gray';//p.colour || 'black';
    st.borderRadius = zoomedRadius;
    st.marginLeft = -zoomedRadius;
    st.marginTop = -zoomedRadius;
    st.position = 'absolute';
    st.display = 'block';
    // st.opacity = 0.85;
    st.height = 2* zoomedRadius;
    st.zIndex = 100-p.level;
    st.width = 2* zoomedRadius;
    p.domElement = el;
    el.particle = p;
    var _this = this;
    $(el).appendTo(this.domElement).click(function() {
      _this.center = p;
      _this.demo.setCenter(p);
    })
  }
  DOMRenderer.prototype.render = function(physics) {
    var p, s, time, _i, _j, _len, _len1, _ref, _ref1;
    DOMRenderer.__super__.render.call(this, physics);
    time = new Date().getTime();
    var zoom = this.zoom;
    if (this.renderParticles) {
      _ref = physics.particles;
      if (_ref.length == 2) {
        this.center = _ref[0];
        this.demo.setCenter(_ref[0]);
      }
      var nv = (this.centerVector.clone()).sub(this.demo.particleCenter.pos);
      if ((this.demo.particleCenter.pos.clone()).sub(this.center.pos).magSq()<=20) nv = (this.centerVector.clone()).sub(this.center.pos);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.spos = (p.pos.clone()).add(nv);
        if (!p.domElement) this.initParticle(p);
        if (this.useGPU) {
          p.domElement.style.WebkitTransform = "translate3d(" + (p.spos.x*zoom | 0) + "px," + (p.spos.y*zoom | 0) + "px, 0px)";
          p.domElement.style.MozTransform = "translate3d(" + (p.spos.x*zoom | 0) + "px," + (p.spos.y*zoom | 0) + "px, 0px)";
        } else {
          p.domElement.style.left = p.spos.x;
          p.domElement.style.top = p.spos.y;
        }
      }
    }
    if (this.renderSprings ) {
      this.canvas.width = this.canvas.width;
      //this.ctx.strokeStyle = 'rgba(0,0,0,0.2)';
      this.ctx.strokeStyle = 'rgb(150,150,150)';
      this.ctx.lineWidth = 7*zoom;
      this.ctx.beginPath();
      _ref1 = physics.springs;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        s = _ref1[_j];
        this.ctx.moveTo(s.p1.spos.x*zoom, s.p1.spos.y*zoom);
        this.ctx.lineTo(s.p2.spos.x*zoom, s.p2.spos.y*zoom);
      }
      this.ctx.stroke();
    }
    if (this.renderMouse && false) {
      if (this.useGPU) {
        this.mouse.domElement.style.WebkitTransform = "translate3d(" + (this.mouse.pos.x | 0) + "px," + (this.mouse.pos.y | 0) + "px,0px)";
      } else {
        this.mouse.domElement.style.left = this.mouse.pos.x;
        this.mouse.domElement.style.top = this.mouse.pos.y;
      }
    }
    return this.renderTime = new Date().getTime() - time;
  };

  DOMRenderer.prototype.setSize = function(width, height) {
    this.width = width;
    this.height = height;
    DOMRenderer.__super__.setSize.call(this, this.width, this.height);
    this.canvas.width = this.width;
    return this.canvas.height = this.height;
  };

  DOMRenderer.prototype.destroy = function() {
    var _results;
    _results = [];
    while (this.domElement.hasChildNodes()) {
      _results.push(this.domElement.removeChild(this.domElement.lastChild));
    }
    return _results;
  };

  return DOMRenderer;

})(Renderer);
