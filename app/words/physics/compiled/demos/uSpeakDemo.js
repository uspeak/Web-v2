// Generated by CoffeeScript 1.3.3
/* uSpeakDemo
*/

var uSpeakDemo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

uSpeakDemo = (function(_super) {

  __extends(uSpeakDemo, _super);

  function uSpeakDemo() {
    this.onCollision = __bind(this.onCollision, this);
    return uSpeakDemo.__super__.constructor.apply(this, arguments);
  }

  uSpeakDemo.prototype.setup = function(full) {
    var attraction, bounds, collide, i, max, min, p, prob, s, _i, _results;
    var _this = this;
    if (full == null) {
      full = true;
    }
    uSpeakDemo.__super__.setup.apply(this, arguments);
    this.physics.integrator = new ImprovedEuler();
    min = new Vector(0.0, 0.0);
    max = new Vector(this.width, this.height);
    bounds = new EdgeBounce(min, max);
    
    
    // attraction = new Attraction(this.mouse.pos, 110, 110);
    ; //|| full ? 10 : 20;
    prob = full ? 0.1 : 0.5;
    _results = [];
    var center = new Particle(100);
    center.level = 0;

    this.particleCenter = new Particle(1);
    _this.particleCenter.pos = (max.clone()).scale(.5)
    //center.pos = this.mouse.pos;
    //console.log(center.pos);
    this.physics.particles.push(center);
    this.physics.particles.push(this.particleCenter);
    //collide.add(center);
    //_results.push();
    center_repulsion = new Force(2000, -10000000);
    center_attraction = new Force(10000, 500000);
    var last_force;
    var last_collide;
    var collide = new Collision();
    var force = new Force(300, -240000);
    this.addParticles = function(to, max) {
    var repulsion = new ParticleAttraction(to, 100, -10000);
    var attraction = new ParticleAttraction(to, 1000, 8000);
      
      last_force = force;
      last_collide = collide;
      collide.add(to);
    attract = new ParticleAttraction(to, 600, 6000);

    nextLevel = to.level+1;
    for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
      p = new Particle(2);
      
      p.moveTo(new Vector(Random(this.width/2-30,this.width/2+30), Random(this.height/2-30,this.height/2+30)));
      if (true) {
        p.setRadius(40);
        p.level = nextLevel;
        p.setMass(3);
        s = new Spring(to, p, 60, .3);
        p.springToParent = s;
        this.physics.springs.push(s);
        //p.behaviours.push(new Wander(2));
      } else {
        // p.setRadius(p.mass * 4);
        // p.behaviours.push(attraction);
      }
      //collide.pool.push(p);
      collide.add(p);
      force.add(p)
      p.behaviours.push(repulsion);
      p.behaviours.push(attraction);
      //p.behaviours.push(collide);
      // p.behaviours.push(bounds);
      _results.push(this.physics.particles.push(p));
    }
    }
    posCenter = new Vector(this.width/2,this.height/2);
    lastCenter = false;
    this.setCenter = function(to) {
    to.setRadius(50);
    // collide.add(to);
    _this.particleCenter.setRadius(0);
    _this.particleCenter.setMass(.035);
    _this.particleCenter.behaviours = [new ParticleAttraction(to, 1000, 800)];
    to.setMass(60);
      if (lastCenter) {
        lastCenter.fixed = false;
        to.behaviours = []
        to.springToParent.restLength = 900;
        to.springToParent.stiffness = .15;
        last_force.remove(to);
        last_collide.remove(to);
        // to.behaviours.push(new ParticleAttraction(lastCenter, 1000, -150000));
      }
      else {
        this.center = to;
        to.pos = posCenter;

        this.addParticles(to,10);

      }
      //to.behaviours = [];
      center_repulsion.add(to);
      center_attraction.add(to);
      // to.fixed = true;
      // 
      this.addParticles(to,5);
      console.log('settedCenter');
      lastCenter = to;
    }
    
    //  this.physics.particles[1].fixed = true;
    // for (i=0;i<this.physics.particles.length;++i) {
    //   this.physics.particles[i].behaviours.push(new Attraction(this.mouse.pos, 10000, -15000));
    //   for (j=0;j<this.physics.particles.length;++j) {
    //     if (i!=j) {
    //       // console.log(this.physics.particles[i]);
          
    //       this.physics.particles[i].behaviours.push(new ParticleAttraction(this.physics.particles[j], 10000, -10000));
    //       // this.physics.particles[j].behaviours.push(new ParticleAttraction(this.physics.particles[i], 1000, 2000));
    //     }
    //   }
    // }
    return _results;
  };

  uSpeakDemo.prototype.onCollision = function(p1, p2) {};

  return uSpeakDemo;

})(Demo);
